// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Games {
  Tekken
  StreetFighter
  SmashBros
}

enum Roles {
  Admin
  Organizer
  User
}

enum Region {
  Europe
  America
  Oceanie
}

enum TournamentType {
  Official
  Public
  Private
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String       @id @default(cuid())
  name                      String?
  email                     String?      @unique
  emailVerified             DateTime?
  image                     String?
  accounts                  Account[]
  sessions                  Session[]
  statistiques              Statistics?
  whitelist                 Whitelist[]
  ownsTournaments           Tournament[] @relation(name: "tournament_owner")
  particiaptesInTournaments Tournament[] @relation(name: "tournament_participant")
  roundsWon                 Round[]      @relation(name: "round_winner")
  isPlayer1                 Match[]      @relation("match_p1")
  isPlayer2                 Match[]      @relation("match_p2")
  role                      Roles        @default(User)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Statistics {
  id                String @id @default(cuid())
  userId            String @unique
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  wins              Int    @default(0)
  losses            Int    @default(0)
  tournamentsAmount Int    @default(0)
  avgPlace          Float  @default(0)
  points            Int    @default(0)
}

model Whitelist {
  id           String     @id @default(cuid())
  users        User[]
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String     @unique
}

model Tournament {
  id              String         @id @default(cuid())
  name            String
  description     String         @db.VarChar(255)
  region          Region         @default(Europe)
  minPlayers      Int
  maxPlayers      Int
  owner           User           @relation(name: "tournament_owner", fields: [ownerId], references: [id])
  ownerId         String
  whitelist       Whitelist?
  allocatedServer Boolean
  bracket         Bracket?
  type            TournamentType @default(Public)
  game            Games          @default(Tekken)
  users           User[]         @relation(name: "tournament_participant")
}

model Bracket {
  id           String         @id @default(cuid())
  tournament   Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId String         @unique
  levels       BracketLevel[]
}

model BracketLevel {
  id        String  @id @default(cuid())
  bestOf    Int
  rounds    Round[]
  bracket   Bracket @relation(fields: [bracketId], references: [id])
  bracketId String  @unique
}

model Round {
  id             String       @id @default(cuid())
  bracketLevel   BracketLevel @relation(fields: [bracketLevelId], references: [id])
  bracketLevelId String       @unique
  winner         User?        @relation(name: "round_winner", fields: [winnerId], references: [id])
  winnerId       String?
  matches        Match[]
}

model Match {
  id        String  @id @default(cuid())
  round     Round   @relation(fields: [roundId], references: [id])
  roundId   String  @unique
  player1   User?   @relation(name: "match_p1", fields: [player1Id], references: [id])
  player1Id String?
  player2   User?   @relation(name: "match_p2", fields: [player2Id], references: [id])
  player2Id String?
}
